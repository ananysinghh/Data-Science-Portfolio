import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import panel as pn
import hvplot.pandas

df=pd.read_csv('book1.csv', encoding='latin-1')
pn.state.cache['data'] = df.copy()
df
Df.shape
df.info()
df.describe()
df.head(5)
df.tail(5)
a=df.columns
a
cab=df['Cabin'].isna().sum()
print("cabin values which are missing: ",cab)

gen=df['Sex'].isna().sum()
print("gender values which are missing: ",gen)

age=df['Age'].isna().sum()
print("Age values which are missing: ",age)

embark=df['Embarked'].isnull().sum()
print("embarked/destination values which are missing: ",embark)
df['Embarked'] = df['Embarked'].map({ 'S': "Cherbourg" , 'C': "Queenstown" , 'Q': "Southampton" })
a= df['Embarked'].value_counts()
a.name='Port of Embarktion'
print(a)
df.head(5)
mean_value = df['Age'].mean()

df['Age'].fillna(mean_value, inplace=True)
df.isnull().sum()
df.tail(5)
sib=df['SibSp'].sum()
print("Number of siblings/spouse present on the ship:",sib)
df[df["Name"].str.contains("Capt")]
female = df['Sex'].value_counts()['female']
male = df['Sex'].value_counts()['male']
survived_people = df['Survived'].sum()
total_people=female + male
died_people = total_people - survived_people

a1= f"ACCORDING TO DATASET: "
a2= f"Total number of people: {total_people}"
a3= f"Number of injured people: {survived_people}"
a4= f"Number of deaths: {died_people}"
a5= f"aboarded number of females: {female}"
a6= f"aboarded number of males: {male}"

data1= pn.pane.Markdown(a2)
data2= pn.pane.Markdown(a3)
data3= pn.pane.Markdown(a4)
data4= pn.pane.Markdown(a5)
data5= pn.pane.Markdown(a6)
df.head(3)
survived_female = df.groupby('Sex')['Survived'].value_counts()['female']    

f1= f"\nfemale passengers description: \n {survived_female} "
survived_male = df.groupby('Sex')['Survived'].value_counts()['male']

m1= f"\nmale passengers description: \n {survived_male} "
data = pd.DataFrame({'People': ['Boarded', 'Injured', 'Deaths'],
                     'Number': [total_people, survived_people, died_people]})

# Plot the result using hvplot
people_plot = data.hvplot(kind='scatter', x='People', y='Number', marker='o', size=13, color='red') * \
            data.hvplot(kind='line', x='People', y='Number', color='green')

people_plot.opts(xlabel='Types of People', ylabel='Number', title='Number of People', 
                 fontsize={'xlabel': 18, 'ylabel': 16, 'title': 20})
people_plot
# Calculate the number of survived individuals by gender
by_gender = df.groupby('Sex')['Survived'].sum()

# Plot the result using hvplot
survived_plot = by_gender.hvplot(kind='bar', xlabel='Gender', ylabel='Number of Survived Individuals', title='Number of Survived Individuals by Gender', color='green')

survived_plot
Gender = ['Female','Male']
explode = (0.1, 0.0)
colors = ("orange", "cyan")

fig, ax = plt.subplots(figsize=(10, 7))
ax.pie(by_gender , explode=explode, labels=Gender, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90)
ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()
# Define age groups
df['AgeGroup'] = pd.cut(df['Age'], bins=[0, 18, 30, 50, 70, 100],
                        labels=['Underage (0-18)', 'Young Adult (18-30)', 'Middle Age (30-50)',
                                'Adult (50-70)', 'Elder Citizen (70-100)'])

# Calculate survival count by age group
by_age = df.groupby('AgeGroup',observed=False)['Survived'].sum()

# Plot the survival rate by age group
ageplot = by_age.hvplot(kind='bar' , xlabel='Age Group', ylabel='Survival Count',title='Survival Count by Age Group')
ageplot
survival_by_class = df.groupby('Pclass')['Survived'].mean()
survival_by_class = survival_by_class*100

# Plot the result using hvplot
survived_class_plot = survival_by_class.hvplot(kind='bar', xlabel='Passenger class', ylabel='Rate of Survival', title='Rate of Survived Individuals by Pclass', color='green')
survived_class_plot
df[['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Survived']].corr()
correlation_matrix = df[['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Survived']].corr()

# Create a heatmap using seaborn
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm")
plt.title("Heatmap of Correlation Matrix")
plt.show()
Df.columns
df.head(2)
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
# Separate features and target
features = df.drop(['Name','Sex','Ticket','Cabin','Embarked','AgeGroup'], axis=1)
target = df['Survived']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2)
#Fitting Decision Tree classifier to the training set  
classifier= RandomForestClassifier(n_estimators= 10, criterion="entropy")

classifier.fit(X_train, y_train)
# Evaluate the model
c11= classifier.score(X_test, y_test)
c1= f"random forest model score: {c11}"
#Predicting the test set result  
y_predicted= classifier.predict(X_test)
y1= f"predicted numpy array :\n {y_predicted}"
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_predicted)
cm1= f"confusion matrix : \n {cm}"
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
plt.xlabel("Predicted label")
plt.ylabel("True label")
plt.title("Confusion Matrix")
plt.show()
from sklearn.metrics import mean_squared_error, r2_score

def metrics(y_true, y_pred):
    print(f'RMSE:', mean_squared_error(y_true, y_pred) ** 0.5)
    print(f'R_Squared value:', r2_score(y_true, y_pred))
    
def accuracy(y_true, y_pred):
    errors = abs(y_true - y_pred)
    mape = 100 * np.mean(errors/y_true)
    accuracy = 100 - mape
    return accuracy

metrics(y_test, y_predicted)
accuracy(y_test, y_predicted)
button1 = pn.widgets.Button(name="Introduction", button_type="warning", icon="file-info", styles={"width": "100%"})
button2 = pn.widgets.Button(name="Data Dictionary", button_type="warning", styles={"width":"100%"})
button3 = pn.widgets.Button(name="Data Analysis", button_type="warning", icon="clipboard-data", styles={"width": "100%"})
button4 = pn.widgets.Button(name="Machine Learning", button_type="warning", icon="timeline-event-text", styles={"width": "100%"})
def show_page(page_key):
    main_area.clear()
    main_area.append(mapping[page_key])
button1.on_click(lambda event: show_page("Page1"))
button2.on_click(lambda event: show_page("Page2"))
button3.on_click(lambda event: show_page("Page3"))
button4.on_click(lambda event: show_page("Page4"))
# Load your JPEG image
image_path = "titanic.jpg"

# Create a JPEG pane
jpeg_pane = pn.pane.JPG(image_path, sizing_mode='scale_both')

def CreatePage1():
    return pn.Column(
        pn.pane.Markdown("# TITANIC DATA ANALYSIS"),
        pn.pane.Markdown(" RMS Titanic was a British passenger and mail carrying ocean liner, operated by the White Star Line, that sank in the North Atlantic Ocean on 15 April 1912 as a result of striking an iceberg.The disaster drew public attention, spurred major changes in maritime safety regulations, and inspired many artistic works."), 
        pn.pane.Markdown(" Titanic data analytics not only provides a detailed understanding of the factors that influenced the survival of its passengers but also serves as a poignant reminder of the human stories behind the numbers. Through meticulous analysis, we can learn valuable lessons about safety, emergency preparedness, and social dynamics in times of crisis. This case study continues to be a powerful tool for data scientists and historians alike, illustrating the profound impact of analytical insights on our understanding of historical events."),
        pn.Column("## Titanic Disaster", jpeg_pane)
        )

def CreatePage2():
    return pn.Column(
        pn.pane.Markdown("""| Key            | Variable          | Definition                                      |
|----------------|-------------------|-------------------------------------------------|
| survival       | Survival          | 0 = No, 1 = Yes                                 |
| pclass         | Ticket class      | 1 = 1st, 2 = 2nd, 3 = 3rd                        |
| sex            | Sex               |                                                 |
| Age (years)    | Age               |                                                 |
| sibsp          | # of siblings/spouses aboard the Titanic |
| parch          | # of parents/children aboard the Titanic |
| ticket         | Ticket number     |                                                 |
| fare (Â£)       | Passenger fare    |                                                 |
| cabin          | Cabin number      |                                                 |
| embarked       | Port of Embarkation | C = Cherbourg, Q = Queenstown, S = Southampton |"""),
        pn.Row(pn.Column(data1, data2, data3, data4, data5, width=550)),
        pn.Row(pn.Column(people_plot.opts(width=700),margin=(0, 25)))
    )

def CreatePage3():
    return pn.Column(
        pn.Column(
            pn.pane.Markdown("how many Males and females survived"),
            pn.Row(pn.pane.Markdown(f1, width=550),
                   pn.pane.Markdown(m1, width=550))),
        pn.Column(survived_plot.opts(width=700), margin=(0, 25)),
        pn.Column(
            pn.pane.Markdown("Survived number of passengers according to their age by making age group "),
            pn.Row(ageplot.opts(width=700), margin=(0, 25))),
        pn.Column(
            pn.pane.Markdown("Survival rate of passengers according to their ticket classes"),
            pn.Row(survived_class_plot.opts(width=700), margin=(0, 25)))
    )


ml_snippet_pane = pn.pane.JPG('ml_snippet.jpg') 
def CreatePage4():
    return pn.Column(
        pn.pane.Markdown("## What is MACHINE LEARNING (ML)"),
        pn.pane.Markdown("Machine learning is a type of artificial intelligence (AI) that allows software applications to become more accurate in predicting outcomes without being explicitly programmed to do so. Machine learning algorithms use historical data as input to predict new output values. Python is a popular programming language for machine learning because it has many libraries and frameworks that make it easy to implement machine learning algorithms. Some of the most popular Python libraries for machine learning include:\n Scikit-learn: A general-purpose machine learning library that includes algorithms for classification, regression, clustering, and dimensionality reduction."),
        pn.pane.Markdown("\n"),
        pn.pane.Markdown("## Why use prediction based ML model? "),
        pn.pane.Markdown("In the dataset, not every survival or survived number of passengers is given, \nSo This Model is made to predict survival of the passengers that may boarded on the Titanic Ship but data about them is not available on the dataset."),
        c1,
        y1,
        cm1,
        pn.Row("## Code Snippet", ml_snippet_pane)
    )
mapping = {
    "Page1": CreatePage1(),
    "Page2": CreatePage2(),
    "Page3": CreatePage3(),
    "Page4": CreatePage4()
}
#################### SIDEBAR LAYOUT ##########################
sidebar = pn.Column(pn.pane.Markdown("## Pages"), button1, button2, button3, button4, styles={"width": "100%", "padding": "15px"})

#################### MAIN AREA LAYOUT ##########################
main_area = pn.Column(mapping["Page1"], styles={"width":"100%"})

###################### APP LAYOUT ##############################
template = pn.template.BootstrapTemplate(
    title=" Titanic Data Analytics Web App",
    sidebar=[sidebar],
    main=[main_area],
    header_background="black", 
    site="DASHBOARD", theme=pn.template.DarkTheme,
    sidebar_width=250, ## Default is 330
    busy_indicator=None,
)

# Serve the Panel app
template.servable()
